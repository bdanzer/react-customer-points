{"version":3,"sources":["api/api.js","utils/points.js","utils/dates.js","components/table/points-table.jsx","components/table/table-row.jsx","App.js","index.js"],"names":["transactionsData","Promise","resolve","transactionData","calculatePoints","price","points","Math","floor","month","getMonthsBack","initialDate","monthsToGoBack","initialDateObject","Date","clonedInitialDate","initialMonth","getMonth","movedDate","setMonth","monthsInRange","i","push","filterDates","customerData","monthsDataTemplate","map","amount","forEach","data","transactionDate","date","transactionTime","getTime","name","customer","monthMapper","array","monthIndex","monthData","Object","objectSpread2","[object Object]","months","customerId","PointsTable","children","headers","react_default","a","createElement","className","id","header","keys","key","TableRow","App","_useState","useState","_useState2","slicedToArray","transactions","setTransactionsData","getTransactions","_ref","asyncToGenerator","regenerator_default","mark","_callee","tData","_getMonthsBack","_getMonthsBack2","wrap","_context","prev","next","sent","console","log","stop","apply","this","arguments","useEffect","rowData","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c494d0e4.chunk.js","sourcesContent":["import transactionData from \"./data/transactionData\";\n\n/**\n * Mock promise as if it were an async request\n */\nexport const transactionsData = new Promise((resolve) =>\n    resolve(transactionData)\n);\n","export function calculatePoints(price) {\n    let points = 0;\n\n    //Round down to the neareast dollar incase of change\n    price = Math.floor(price);\n\n    points = 50 < price && price < 100 ? price - 50 : points;\n    points = price > 100 ? 50 + 2 * (price - 100) : points;\n\n    return points;\n}\n","import { calculatePoints } from \"./points\";\n\nconst month = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n];\n\nexport const getMonthsBack = (initialDate, monthsToGoBack) => {\n    let initialDateObject = new Date(initialDate);\n    let clonedInitialDate = new Date(+initialDateObject);\n\n    let initialMonth = initialDateObject.getMonth();\n    monthsToGoBack = initialMonth - monthsToGoBack;\n\n    let movedDate = clonedInitialDate.setMonth(monthsToGoBack);\n\n    let monthsInRange = [];\n\n    for (let i = monthsToGoBack; i <= initialMonth; i++) {\n        monthsInRange.push(month[i]);\n    }\n\n    return [initialDateObject, movedDate, monthsInRange];\n};\n\nexport const getMonth = (monthIndex) => month[monthIndex];\n\nexport const filterDates = (\n    transactionData,\n    initialDate,\n    movedDate,\n    monthsInRange\n) => {\n    let customerData = {};\n    let monthsDataTemplate = monthsInRange.map((month) => ({\n        month,\n        amount: 0,\n    }));\n\n    transactionData.forEach((data) => {\n        let transactionDate = new Date(data.date);\n        let transactionTime = transactionDate.getTime();\n\n        if (\n            transactionTime >= movedDate &&\n            transactionTime <= initialDate.getTime()\n        ) {\n            let name = data.customer.name;\n\n            const monthMapper = (array) => {\n                let month = getMonth(transactionDate.getMonth());\n\n                return array.map((monthData) => {\n                    if (monthData.month === month) {\n                        return {\n                            ...monthData,\n                            amount:\n                                monthData.amount + calculatePoints(data.amount),\n                        };\n                    }\n\n                    return monthData;\n                });\n            };\n\n            /**\n             * On first loop set initial data for each customer\n             */\n            if (!customerData[name]) {\n                customerData = {\n                    ...customerData,\n                    [name]: {\n                        name,\n                        customerId: data.customer.customerId,\n                        months: monthMapper(monthsDataTemplate),\n                        amount: calculatePoints(data.amount),\n                    },\n                };\n            } else {\n                customerData = {\n                    ...customerData,\n                    [name]: {\n                        ...customerData[name],\n                        months: monthMapper(customerData[name].months),\n                        amount:\n                            calculatePoints(data.amount) +\n                            customerData[name].amount,\n                    },\n                };\n            }\n        }\n    });\n\n    return customerData;\n};\n","import React from \"react\";\n\nimport \"./points-table.scss\";\n\nexport default function PointsTable({ children, data, headers }) {\n    return (\n        <div className=\"table-wrap\">\n            <table id=\"customers\">\n                <tbody>\n                    <tr>\n                        {headers.map((header) => (\n                            <th>{header}</th>\n                        ))}\n                    </tr>\n                    {Object.keys(data).map((key, i) => children(data[key], i))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport \"./table-row.scss\";\n\nexport default function TableRow({ name, points, months }) {\n    return (\n        <tr>\n            <td>{name}</td>\n            {months.map((month) => (\n                <td>{month.amount}</td>\n            ))}\n            <td>{points}</td>\n        </tr>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { transactionsData } from \"./api/api\";\nimport { filterDates, getMonthsBack } from \"./utils/dates\";\n\nimport PointsTable from \"./components/table/points-table\";\nimport TableRow from \"./components/table/table-row\";\n\nimport \"./styles.css\";\n\nexport default function App() {\n    const [transactions, setTransactionsData] = useState();\n\n    const getTransactions = async () => {\n        let tData = await transactionsData;\n\n        const [initialDate, movedDate, monthsInRange] = getMonthsBack(\n            \"11/15/2018\",\n            3\n        );\n\n        tData = filterDates(tData, initialDate, movedDate, monthsInRange);\n\n        setTransactionsData(tData);\n\n        console.log(tData);\n    };\n\n    useEffect(() => {\n        getTransactions();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <h1>Points Per Customer</h1>\n            {transactions && (\n                <PointsTable\n                    headers={[\n                        \"Name\",\n                        \"August\",\n                        \"September\",\n                        \"October\",\n                        \"November\",\n                        \"Total\",\n                    ]}\n                    data={transactions}\n                >\n                    {(rowData, i) => (\n                        <TableRow\n                            key={i}\n                            name={rowData.name}\n                            points={rowData.amount}\n                            months={rowData.months}\n                        />\n                    )}\n                </PointsTable>\n            )}\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}